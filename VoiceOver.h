//@class NSString, AXSiriShortcut;
void VOTCommand(NSString* command);

@interface VOSCommand : NSObject {

	NSString* _rawValue;
//	AXSiriShortcut* _siriShortcut;
	NSString* _votEventCommandName;
	long long _commandType;
}
@property (nonatomic,retain) NSString * votEventCommandName;
@property (assign,nonatomic) long long commandType;
@property (nonatomic,readonly) NSString * rawValue;
//@property (nonatomic,readonly) AXSiriShortcut * siriShortcut;
@property (nonatomic,readonly) NSString * localizedName;
+(id)Cut;
+(id)Copy;
+(id)Undo;
+(id)Redo;
+(id)Paste;
+(id)Escape;
+(id)Invalid;
+(id)LaunchPeopleDetection;
+(id)builtInCommandWithStringValue:(id)arg1 ;
+(id)commandWithSiriShortcut:(id)arg1 ;
+(id)PrimaryActivate;
+(id)SecondaryActivate;
+(id)MagicTap;
+(id)PerformLongPress;
+(id)MoveToPreviousElement;
+(id)MoveToNextElement;
+(id)MoveToFirstElement;
+(id)MoveToElementAbove;
+(id)MoveToElementBelow;
+(id)MoveToLastElement;
+(id)MoveToPreviousContainer;
+(id)MoveToNextContainer;
+(id)MoveToTopOfCurrentContainer;
+(id)MoveToBottomOfCurrentContainer;
+(id)MoveToTopOfCurrentDocument;
+(id)MoveToBottomOfCurrentDocument;
+(id)MoveToLinkedUI;
+(id)MoveToStatusBar;
+(id)MoveToPreviousElementCommunity;
+(id)MoveToNextElementCommunity;
+(id)MoveToPreviousCharacter;
+(id)MoveToNextCharacter;
+(id)MoveToPreviousWord;
+(id)MoveToNextWord;
+(id)MoveToPreviousSentence;
+(id)MoveToNextSentence;
+(id)MoveToPreviousParagraph;
+(id)MoveToNextParagraph;
+(id)MoveToPreviousStyleChange;
+(id)MoveToNextStyleChange;
+(id)MoveToPreviousFontChange;
+(id)MoveToNextFontChange;
+(id)MoveToPreviousUnderlineText;
+(id)MoveToNextUnderlineText;
+(id)MoveToPreviousItalicText;
+(id)MoveToNextItalicText;
+(id)MoveToPreviousBoldText;
+(id)MoveToNextBoldText;
+(id)MoveToPreviousColorChange;
+(id)MoveToNextColorChange;
+(id)MoveToPreviousPlainText;
+(id)MoveToNextPlainText;
+(id)MoveToPreviousMisspelledWord;
+(id)MoveToNextMisspelledWord;
+(id)MoveToPreviousBlockquote;
+(id)MoveToNextBlockquote;
+(id)MoveToPreviousSameBlockquote;
+(id)MoveToNextSameBlockquote;
+(id)MoveToPreviousFrame;
+(id)MoveToNextFrame;
+(id)MoveToPreviousTable;
+(id)MoveToNextTable;
+(id)MoveToPreviousColumn;
+(id)MoveToNextColumn;
+(id)MoveToPreviousList;
+(id)MoveToNextList;
+(id)MoveToPreviousSameElement;
+(id)MoveToNextSameElement;
+(id)MoveToPreviousDifferentElement;
+(id)MoveToNextDifferentElement;
+(id)MoveToPreviousHeading;
+(id)MoveToNextHeading;
+(id)MoveToPreviousSameHeading;
+(id)MoveToNextSameHeading;
+(id)MoveToPreviousLink;
+(id)MoveToNextLink;
+(id)MoveToPreviousVisitedLink;
+(id)MoveToNextVisitedLink;
+(id)MoveToPreviousControl;
+(id)MoveToNextControl;
+(id)MoveToPreviousGraphic;
+(id)MoveToNextGraphic;
+(id)MoveToSystemFocusedElement;
+(id)FindElementWithTextSearch;
+(id)PreviousSearchResult;
+(id)NextSearchResult;
+(id)ToggleMute;
+(id)ToggleSpeech;
+(id)ToggleAudioDucking;
+(id)SummarizeElement;
+(id)AnalyzeElement;
+(id)ReadAll;
+(id)ReadFromTop;
+(id)ReadLine;
+(id)ReadWord;
+(id)ReadURL;
+(id)ReadSelectedText;
+(id)ReadTextStyle;
+(id)ReadHint;
+(id)ReadCharacter;
+(id)ReadCharacterPhonetically;
+(id)ReadRowHeader;
+(id)ReadRowContents;
+(id)ReadTableRowColumn;
+(id)ReadTableRowColumnCell;
+(id)ReadColumnHeader;
+(id)ReadColumnContents;
+(id)ReadLineCount;
+(id)SummarizeSystemFocusedElement;
+(id)ReadSystemFocusedElementDetails;
+(id)PreviewElementWith3DTouch;
+(id)PreviousRotor;
+(id)NextRotor;
+(id)PreviousRotorItem;
+(id)NextRotorItem;
+(id)ScrollLeft;
+(id)ScrollRight;
+(id)ScrollUp;
+(id)ScrollDown;
+(id)ShowItemChooser;
+(id)OpenVoiceOverSettings;
+(id)ToggleScreenCurtain;
+(id)StartHelp;
+(id)ToggleCaptionPanel;
+(id)LabelElement;
+(id)MonitorElement;
+(id)ToggleSingleLetterQuickNav;
+(id)ToggleLockModifierKeys;
+(id)DescribeImage;
+(id)ToggleAutomaticAccessibility;
+(id)ShowNotificationCenter;
+(id)ShowControlCenter;
+(id)ActivateSpeakScreen;
+(id)ActivateHomeButton;
+(id)ToggleDock;
+(id)ToggleAppSwitcher;
+(id)ActivateLockButton;
+(id)ShowSpotlight;
+(id)ActivateAccessibilityShortcut;
+(id)ToggleReachability;
+(id)TakeScreenshot;
+(id)SwitchToPreviousApp;
+(id)SwitchToNextApp;
+(id)ToggleTextSelection;
+(id)CopySpeechToClipboard;
+(id)PreviousHandwritingCharacterMode;
+(id)NextHandwritingCharacterMode;
+(id)AnnounceHandwritingCharacterMode;
+(id)GesturedTextInputInsertSpace;
+(id)GesturedTextInputBackspace;
+(id)GesturedTextInputDeleteWord;
+(id)GesturedTextInputPerformReturnEquivalent;
+(id)GesturedTextInputPreviousSuggestion;
+(id)GesturedTextInputNextSuggestion;
+(id)GesturedTextInputLaunchApp;
+(id)GesturedTextInputNextKeyboardLanguage;
+(id)BSIPreviousBrailleMode;
+(id)BSINextBrailleMode;
+(id)BSITranslateImmediately;
+(id)BSIOrientationLock;
+(id)BSIQuickAction;
+(id)GesturedTextInputNextBrailleTable;
+(id)MoveToFirstWord;
+(id)MoveToLastWord;
+(id)ActivateBrailleScreenInput;
+(id)ToggleNavigationStyle;
+(id)ToggleSyncNativeAndExploreFocus;
+(id)allBuiltInCommands;
+(id)commandForVOSEventCommand:(id)arg1 ;
-(unsigned long long)hash;
-(NSString *)localizedName;
-(NSString *)rawValue;
-(BOOL)isEqual:(id)arg1 ;
-(id)description;
-(void)setCommandType:(long long)arg1 ;
-(long long)commandType;
//-(AXSiriShortcut *)siriShortcut;
-(id)_initWithSiriShortcut:(id)arg1 ;
-(id)_initBuiltInCommandWithRawValue:(id)arg1 votEventCommandName:(id)arg2 ;
-(NSString *)votEventCommandName;
-(void)setVotEventCommandName:(NSString *)arg1 ;
@end


//ios 12
@interface AXServer : NSObject {

	BOOL _shouldRegisterClientCallbackSourceOnMainRunloop;
//	AXIPCServer* _server;
//	AXIPCClient* _client;
	NSString* _serverIdentifier;
	NSMutableArray* _assertionWorkBacklog;
	//AXDispatchTimer* _assertionRetryTimer;
	NSObject* _assertionWorkQueue;
}
@property (nonatomic,copy) NSString * serverIdentifier;                                         //@synthesize serverIdentifier=_serverIdentifier - In the implementation block
@property (nonatomic,retain) NSMutableArray * assertionWorkBacklog;                             //@synthesize assertionWorkBacklog=_assertionWorkBacklog - In the implementation block
//@property (nonatomic,retain) AXDispatchTimer * assertionRetryTimer;                             //@synthesize assertionRetryTimer=_assertionRetryTimer - In the implementation block
@property (nonatomic,retain) NSObject* assertionWorkQueue;                   //@synthesize assertionWorkQueue=_assertionWorkQueue - In the implementation block
//@property (nonatomic,retain) AXIPCClient * client;                                              //@synthesize client=_client - In the implementation block
//@property (nonatomic,retain) AXIPCServer * server;                                              //@synthesize server=_server - In the implementation block
@property (assign,nonatomic) BOOL shouldRegisterClientCallbackSourceOnMainRunloop;              //@synthesize shouldRegisterClientCallbackSourceOnMainRunloop=_shouldRegisterClientCallbackSourceOnMainRunloop - In the implementation block
-(id)init;
-(void)dealloc;
//-(AXIPCClient *)client;
//-(void)setClient:(AXIPCClient *)arg1 ;
-(id)_serviceName;
-(id)sendMessage:(id)arg1 ;
//-(void)setServer:(AXIPCServer *)arg1 ;
//-(AXIPCServer *)server;
-(BOOL)_connectIfNecessary;
-(void)sendSimpleMessage:(id)arg1 ;
-(void)setShouldRegisterClientCallbackSourceOnMainRunloop:(BOOL)arg1 ;
-(void)_didConnectToServer;
-(void)_willClearServer;
-(void)_wasDisconnectedFromClient;
-(void)_didConnectToClient;
-(BOOL)sendSimpleMessageWithResult:(id)arg1 ;
-(id)sendSimpleMessageWithObjectResult:(id)arg1 ;
-(void)_connectServerIfNecessary;
-(void)sendAsynchronousMessage:(id)arg1 replyOnQueue:(id)arg2 handler:(/*^block*/id)arg3 ;
-(void)sendAsynchronousMessage:(id)arg1 replyOnQueue:(id)arg2 boolResultHandler:(/*^block*/id)arg3 ;
-(void)sendAsynchronousMessage:(id)arg1 replyOnQueue:(id)arg2 objectResultHandler:(/*^block*/id)arg3 ;
-(void)acquireAssertionWithType:(id)arg1 identifier:(id)arg2 ;
-(void)relinquishAssertionWithType:(id)arg1 identifier:(id)arg2 ;
-(void)setAssertionWorkQueue:(NSObject*)arg1 ;
-(BOOL)sendSimpleMessage:(id)arg1 enqueueError:(id*)arg2 ;
-(NSMutableArray *)assertionWorkBacklog;
//-(AXDispatchTimer *)assertionRetryTimer;
-(void)_processAssertionBacklog;
-(void)setAssertionWorkBacklog:(NSMutableArray *)arg1 ;
-(NSObject*)assertionWorkQueue;
//-(void)setAssertionRetryTimer:(AXDispatchTimer *)arg1 ;
-(void)_initializeAssertionBookkeeping;
-(BOOL)shouldRegisterClientCallbackSourceOnMainRunloop;
-(NSString *)serverIdentifier;
-(void)setServerIdentifier:(NSString *)arg1 ;
@end

@interface AXVoiceOverServer : AXServer

+(id)server;
-(BOOL)_connectIfNecessary;
-(id)_serviceName;
-(id)lastSpokenPhrases;
-(id)lastSoundsPlayed;
-(id)currentRotorName;
-(id)lastScreenChange;
-(id)currentFocusedElement;
-(BOOL)triggerCommand:(long long)arg1 ;
-(BOOL)triggerCommand:(long long)arg1 withArgument:(id)arg2 ;
-(BOOL)isBrailleInputUIShowing;
@end


@interface VOTEvent //: XXUnknownSuperclass {
/*
	double _time;
	int _origin;
	NSString* _command;
//	SCRCIndexMap* _info;
 	id _info;
	CGPoint _touchPoint;
	float _touchVelocity;
	unsigned _fingerCount;
	BOOL _bypassHelp;
}
*/
@property(assign, nonatomic) BOOL bypassHelp;
//@property(retain, nonatomic) VOTKeyInfo* keyInfo;
@property(assign, nonatomic) float touchVelocity;
@property(assign, nonatomic) unsigned fingerCount;
@property(assign, nonatomic) CGPoint touchPoint;
@property(retain, nonatomic) NSString* command;
@property(assign, nonatomic) int origin;
+(id)brailleEventWithCommand:(id)command info:(id)info;
+(id)systemServerEventWithCommand:(id)command info:(id)info;
+(id)internalEventWithCommand:(id)command info:(id)info;
+(id)touchEventWithCommand:(id)command info:(id)info;
+(id)keyEventWithCommand:(id)command keyInfo:(id)info;
+(id)externalDeviceEventWithCommand:(id)command info:(id)info;
-(id)description;
-(id)objectForIndex:(unsigned long)index;
-(void)setObject:(id)object forIndex:(unsigned long)index;
-(void)setInfo:(id)info;
-(BOOL)isBrailleEvent;
-(BOOL)isExternalDeviceEvent;
-(BOOL)isTouchEvent;
-(BOOL)isKeyEvent;
-(double)time;
-(void)dealloc;
-(id)initWithType:(int)type;
@end

@interface VOTEventFactory : NSObject {

	NSObject* _elementManager;
	NSObject* _rotorManager;
	NSObject* _directTouchManager;
	id _delegate;
	int _state;
	int _direction;
	int _rotorSoundZone;
	int _continuityZone;
	float _startPinchDistance;
	int _fingerCount;
	float _travelDistance;
	CGPoint _tapHoldOffset;
//	VOTElement* _currentElement;
	double _lastEchoTime;
	double _rotateStartTime;
	int _rotateDirection;
	CGPoint _nativeSlidingOffset;
	CGPoint _nativeSlidingCenter;
	double _lastTwoFingerSlideTime;
	//VOTGestureEvent* _currentGestureEvent;
	NSArray* _directInteractionElements;
	NSString* _zoomListenerIdentifier;
	double _lastNativeSlideCancel;
	unsigned _tapAndHoldContextId;
	CGPoint _systemControlStartPoint;
	int _systemControlPosition;
	char _systemControlActivated;
	double _systemControlStartSwipeTime;
	double _systemControlFingerDownFollowupTime;
	struct {
		char tapAndHoldMode;
		char firedScrollStatus;
		char rotating;
		char memorizingData;
		char twoFingerTapAndSlide;
		char didPlayStartLabelSound;
		char sendingToDirectTouch;
		char sendingToNativeSlide;
		char gestureSawDownEvent;
		char allowingSystemGesturePassthrough;
	}  _flags;
	double _gestureKeyboardShiftLockStartTime;
//	VOTElement* _lastTouchedDirectTouchElement;

}

@property (nonatomic,readonly) char tapAndHoldMode;
@property (assign,nonatomic) id elementManager;                                       //@synthesize elementManager=_elementManager - In the implementation block
@property (assign,nonatomic) id rotorManager;                                           //@synthesize rotorManager=_rotorManager - In the implementation block
@property (assign,nonatomic) id directTouchManager;                               //@synthesize directTouchManager=_directTouchManager - In the implementation block
@property (assign,nonatomic) id delegate;                                          //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,readonly) CGPoint fingerPosition;
@property (nonatomic,readonly) unsigned fingerCount;
@property (assign,nonatomic) int orientation;
//@property (nonatomic,readonly) VOTHandwritingManager * handwritingManager;
//@property (nonatomic,readonly) VOTDirectInteractionKeyboardManager * directInteractionKeyboardManager;              //@synthesize directInteractionKeyboardManager=_directInteractionKeyboardManager - In the implementation block
//@property (setter=_setHandwritingCaptureTimer:,nonatomic,retain) AXTimer * _handwritingCaptureTimer;                //@synthesize handwritingCaptureTimer=_handwritingCaptureTimer - In the implementation block
//@property (nonatomic,retain) AXEventProcessor * eventProcessor;                                                     //@synthesize eventProcessor=_eventProcessor - In the implementation block
//@property (nonatomic,retain) VOTElement * lastTouchedDirectTouchElement;                                            //@synthesize lastTouchedDirectTouchElement=_lastTouchedDirectTouchElement - In the implementation block
//@property (readonly) unsigned hash;
@property (readonly) Class superclass;
@property (copy,readonly) NSString * description;
@property (copy,readonly) NSString * debugDescription;
+(CGPoint)convertDevicePointToZoomedPoint:(CGPoint)arg1 ;
-(void)_handleIOHIDEvent:(id)arg1 ;
-(void)_handleEventWithData:(id)arg1 ;
-(id)currentElement;
-(void)setRotorManager:(id)arg1 ;
-(void)setDirectTouchManager:(id)arg1 ;
-(void)resetEventFactory;
-(void)unregisterForEvents;
-(char)registerForEvents;
//-(VOTDirectInteractionKeyboardManager *)directInteractionKeyboardManager;
-(char)processEventAsGesturedTextInput:(id)arg1 ;
-(char)directTouchElementsPresent;
-(void)startTapAndHoldMode;
-(void)cancelTapAndHold:(CGPoint)arg1 ;
-(CGPoint)fingerPosition;
-(char)tapAndHoldMode;
-(void)gesturedTextInputManager:(id)arg1 accessCurrentGesturedTextInputElement:(/*^block*/id)arg2 ;
-(void)gesturedTextInputManager:(id)arg1 moveToElementMatchingRotorType:(int)arg2 inDirection:(int)arg3 ;
-(void)processEvent:(id)arg1 ;
-(void)directInteractionElementsUpdated:(id)arg1 ;
-(void)currentElementDidUpdate:(id)arg1 ;
-(void)_setHandwritingCaptureTimer:(id)arg1 ;
-(void)_tapHoldFired;
-(void)_scrollStatusFired;
-(void)_twoFingerHoldFired;
-(void)_startLabelElementSoundPlay;
-(void)_systemControlLocationTimer;
-(void)_beginNativeSliding:(id)arg1 ;
-(void)_handleRotorChangedNotification:(id)arg1 ;
-(void)_registerForIOHIDUsage;
-(void)_convertZoomRecordToDeviceRecord:(id)arg1 ;
-(void)_processGestureEvent:(id)arg1 ;
-(id)_currentGesturedTextInputManager;
-(char)_eventFilter:(id)arg1 ;
-(void)_registerForZoomListener;
//-(VOTHandwritingManager *)handwritingManager;
-(id)_brailleGestureManager;
-(id)rotorManager;
-(void)_gestureTrackingCallbackWithFactory:(id)arg1 isHandlingSystemControlEvent:(char)arg2 ;
-(char)_isTapAndHoldPending;
-(char)_shouldUseGesturedTextInputManager;
-(char)_shouldAttemptTracking;
-(void)_cancelTapAndHold:(CGPoint)arg1 ;
-(char)_shouldAllowSpeakThisGesture;
-(int)_systemControlPosition:(CGPoint)arg1 fingerCount:(unsigned)arg2 ;
-(void)_sendSystemControlEvent:(id)arg1 ;
-(void)_resetSystemControlStatus;
-(CGPoint)_averagePointForLastDownEvent;
-(id)_handleGestureKeyboardTappingCallback:(unsigned)arg1 fingerCount:(unsigned)arg2 isDown:(char)arg3 location:(CGPoint)arg4 ;
-(void)_stopMemorizingSession;
-(void)_processIdle:(CGPoint)arg1 ;
//-(AXTimer *)_handwritingCaptureTimer;
//-(void)setLastTouchedDirectTouchElement:(VOTElement *)arg1 ;
//-(VOTElement *)lastTouchedDirectTouchElement;
-(char)_handleDirectInteractionEvent:(id)arg1 ;
-(char)_gestureEventIsInvalid:(id)arg1 ;
-(void)_feedEventToHandwritingRecognition:(id)arg1 ;
-(id)_touchLocationsForGestureEvent:(id)arg1 ;
-(void)_processTapAndHoldMode:(id)arg1 ;
-(char)_updateFingersInSystemControlLocation:(CGPoint)arg1 fingerCount:(unsigned)arg2 isLift:(char)arg3 ;
-(void)_cancelTapAndHoldWithValue:(id)arg1 ;
-(CGPoint)_convertZoomPointToDevicePoint:(CGPoint)arg1 ;
-(void)brailleGestureManager:(id)arg1 setForcedOrientation:(int)arg2 shouldAnnounce:(char)arg3 ;
-(void)brailleGestureManager:(id)arg1 unsetForcedOrientationAndAnnounce:(char)arg2 ;
-(void)directInteractionModeStatus:(char)arg1 ;
-(void)_handleKeyboardVisibilityChanged:(id)arg1 ;
-(id)directTouchManager;
//-(AXEventProcessor *)eventProcessor;
//-(void)setEventProcessor:(AXEventProcessor *)arg1 ;
-(id)elementManager;
-(void)setElementManager:(id)arg1 ;
-(void)dealloc;
-(void)setDelegate:(id)arg1 ;
-(id)init;
-(id)delegate;
-(int)orientation;
-(void)setOrientation:(int)arg1 ;
-(long)_registerForAXNotifications:(char)arg1 ;
-(unsigned)fingerCount;
-(void)gestureTrackingCallbackWithFactory:(id)arg1 ;
-(void)gestureTappingCallbackWithFactory:(id)arg1 ;
-(void)gestureSplitTappingCallbackWithFactory:(id)arg1 ;
-(char)shouldBlockSplitTapGestureWithFactory:(id)arg1 ;
-(void)updateOrientation;

//ios 12
+(id)initialize;
//
@end

@interface VOTWorkspace : NSObject{
VOTEventFactory* _eventFactory;
NSObject*_elementManager;
NSObject* _rotorManager;
NSObject* _directTouchManager;
CFRunLoopRef _runLoop;
char _soundMuted;
char _speechMuted;
char _voiceOverMuted;
char _screenCurtainEnabled;
char _isSystemBatteryLow;
char _hintsEnabled;
char _AXInspectorEnabled;
char _typingPitchChangeEnabled;
char _isPostingKeyboardEvents;
char _speakingRateInRotor;
char _outputDisabled;
char _allowSingleLetterSearching;
char _useCompactVoice;
char _speakNotifications;
char _playKeyboardClicksOnHWInput;
int _swTypingFeedback;
int _hwTypingFeedback;
char _largeCursorEnabled;
int _punctuationLevel;
int _typingMode;
int _orientation;
int _realOrientation;
int _lockButtonPressCount;
double _lastLockButtonPress;
double _lastHomeButtonPress;
double _lastKeyboardKeyPress;
NSArray* _enabledLanguageRotorItems;
NSString* _selectedLanguage;
NSString* _systemSpokenLanguage;
NSMutableDictionary* _phoneticsTable;
int _cachedRotorType;
NSMutableDictionary* _appCache;
NSLock* _appCacheLock;
NSString* _postKeyThreadKey;
struct {
	char isRunLoopEnabled;
	char speakAutocorrectionsEnabled;
	char ringerSwitchSilent;
	char audioIsRoutedToSpeaker;
	char speechLogging;
	char isInternalInstall;
}  _vtwFlags;
NSMutableSet* _reasonsToDisableSoftwareKeyboard;
NSMutableSet* _reasonsToEnableSoftwareKeyboard;
char _originalKBAttachedState;
int _triggeredKBAttachState;
int _forcedOrientation;
int _applicationOrientation;
char _wasEnabledThroughAccessory;
char _accessoryShutdownInProgress;
int _navigateImagesOption;
NSString* additionalLanguageRotorItem;
NSString* _defaultDialect;
int _suppressValueChangeNotificationCount;
NSString* _reachabilityIdentifier;
}
+(id)sharedWorkspace;
-(VOTEventFactory*) eventFactory;
-(void)postEvent:(id)arg1;
-(void)dispatchCommand:(id)arg1;
@end

@interface VOTElement : NSObject <NSCopying> {

	id _uiElement;
//	VOTElement* _elementForGesturedTextInput;
	char shouldSkipValidateElement;
	//VOTElementUniqueIdentification* _uniqueIdentification;

}

@property (assign,nonatomic) char shouldSkipValidateElement;
@property (nonatomic,copy) NSString * userDefinedLabel;
@property (nonatomic,copy) NSString * definedLabel;
@property (assign,nonatomic) char isFirstItemInList;
@property (assign,nonatomic) char isFirstItemInTable;
@property (assign,nonatomic) char isFirstItemInLandmark;
@property (nonatomic,readonly) NSString * toggleStatusLabel;
//@property (nonatomic,readonly) VOTElementUniqueIdentification * uniqueIdentification;              //@synthesize uniqueIdentification=_uniqueIdentification - In the implementation block
+(void)resetSystemAppElement;
+(id)systemAppApplication;
+(id)_elementWithAXUIElementRef:(id)arg1 cache:(CFDictionaryRef)arg2 identification:(id)arg3 ;
+(id)_elementWithAXUIElementRef:(id)arg1 ;
+(void)initialize;
+(id)elementWithUIElement:(id)arg1 ;
+(id)systemWideElement;
+(id)springBoardApplication;
-(void)setFirstResponder:(id)arg1 ;
-(char)isMobilePhone;
-(void)addTextualInformationToRequest:(id)arg1 options:(int)arg2 ;
-(id)initApplicationWithPosition:(CGPoint)arg1 ;
-(id)firstResponderElement;
-(id)elementsForAttribute:(int)arg1 ;
-(id)equivalenceTag;
-(id)_initWithUIElement:(id)arg1 identification:(id)arg2 ;
-(id *)uniqueIdentification;
-(char)doesHaveTraits:(unsigned long long)arg1 ;
-(void)setUserDefinedLabel:(NSString *)arg1 ;
-(NSString *)userDefinedLabel;
-(NSString *)definedLabel;
-(id)urlLabel;
-(id)elementsForAttribute:(int)arg1 withParameter:(id)arg2 ;
-(id)touchContainerAXElement;
-(id)elementForParameterizedAttribute:(int)arg1 parameter:(id)arg2 ;
-(char)overridesVoiceOverInstructions;
-(char)canExpandMathEquation;
-(id)elementsInDirection:(int)arg1 withCount:(unsigned)arg2 ;
-(id)elementForGesturedTextInput;
-(id)initWithPosition:(CGPoint)arg1 ;
-(char)isAssistiveTouch;
-(CGPoint)elementFrameLocation:(int)arg1 ;
-(void)performSimpleTapAtPoint:(CGPoint)arg1 withContextId:(unsigned)arg2 withDelay:(float)arg3 ;
-(char)supportsSecondaryActivate;
-(void)performSimpleTap:(char)arg1 ;
-(void)expandMathEquation;
-(char)supportsActivate;
-(void)updateTraits;
-(void)updateCenterPoint;
-(char)verifyElementExists:(CGPoint*)arg1 ;
-(char)doesHaveAllTraits:(unsigned long long)arg1 ;
-(char)isSoftwareKeyboardActive;
-(float)activationDelay;
-(id)cachedCustomRotorActions;
-(id)objectForRange:(NSRange)arg1 withParameterizedAttribute:(int)arg2 ;
-(id)_selectionStringForSegment:(int)arg1 ;
-(NSString *)toggleStatusLabel;
-(id)initWithPosition:(CGPoint)arg1 startWithElement:(id)arg2 ;
-(id)copyWithCache;
-(char)isAlive;
-(id)axInspectorInfo;
-(id)supportedLanguageIfNecessary;
-(id)invalidStatus;
-(char)isComboBox;
-(char)isInTableCell;
-(char)dismissAlternativeKeyboardPicker;
-(char)keyboardKeyAllowsTouchTyping;
-(char)elementVisibilityAffectsLayout;
-(char)updatesOnActivationAfterDelay;
-(char)isAwayAlertItem;
-(char)isAwayAlertItemNew;
-(CGRect)gesturePracticeRegion;
-(void)setDefinedLabel:(NSString *)arg1 ;
-(id)elementStoredUserLabel;
-(char)isFirstItemInList;
-(void)setIsFirstItemInList:(char)arg1 ;
-(char)isFirstItemInTable;
-(void)setIsFirstItemInTable:(char)arg1 ;
-(char)isFirstItemInLandmark;
-(void)setIsFirstItemInLandmark:(char)arg1 ;
-(id)focusedApplication;
-(id)linkedElement;
-(void)updateFlowToElements;
-(id)flowToElements;
-(id)nextContainer;
-(id)previousContainer;
-(id)ancestryForTraits:(unsigned long long)arg1 ;
-(id)dataDetectorURL:(CGPoint)arg1 ;
-(void)updatePaths;
-(void)updateVisiblePoint;
-(void)updateLanguage;
-(void)updateEquivalenceTag;
-(id)nextElement;
-(id)previousElement;
-(int)blockquoteLevel;
-(id)roleDescription;
-(char)isEditableTextArea;
-(char)onlyHasTraits:(unsigned long long)arg1 ;
-(char)doesHaveTraitsForGesturedTextInput;
-(void)scrollToElementWithCompletion:(/*^block*/id)arg1 ;
-(void)incrementAction;
-(void)setGesturePracticeInfo:(id)arg1 ;
-(void)decrementAction;
-(void)zoomInAtLocation:(CGPoint)arg1 ;
-(id)photoDescription;
-(id)mapDetailedInformationAtPoint:(CGPoint)arg1 ;
-(char)lastHitTestNearBorder;
-(float)distanceToOtherRoad:(CGPoint)arg1 withDirection:(float)arg2 otherRoad:(id)arg3 ;
-(float)distanceToEndOfRoad:(CGPoint)arg1 withDirection:(float)arg2 ;
-(id)upcomingRoadsAtPoint:(CGPoint)arg1 withDirection:(float)arg2 ;
-(char)roadContainsTrackingPoint:(CGPoint)arg1 ;
-(void)zoomOutAtLocation:(CGPoint)arg1 ;
-(void)decreaseTrackingDetail;
-(void)increaseTrackingDetail;
-(id)textOperationsOperator;
-(void)performTextOperation:(id)arg1 ;
-(char)performEscape;
-(void)findSearchResult:(char)arg1 withSearchText:(id)arg2 ;
-(void)performTapAtPoint:(CGPoint)arg1 ;
-(char)allowsAutoAlternativeCharacterActivation;
-(void)performDoubleTap;
-(void)performSimpleTap;
-(float)absoluteValue;
-(void)scrollUpPage;
-(void)scrollDownPage;
-(void)scrollRightPage;
-(void)scrollLeftPage;
-(char)scrollNextPage;
-(char)scrollPreviousPage;
-(void)scrollRectToVisible:(CGRect)arg1 withCompletion:(/*^block*/id)arg2 ;
-(id)scrollStatus;
-(char)showsDualPages;
-(char)readingContentCausesPageTurn;
-(id)firstVisibleElementInList;
-(char)elementOnSameLine:(id)arg1 ;
-(id)tableViewCellWithRowIndexPath:(NSRange)arg1 ;
-(id)customRotorTitles;
-(char)allowCustomActionHintSpeakOverride;
-(char)retainsCustomRotorActionSetting;
-(id)customRotorActions;
-(char)performCustomActionWithIdentifier:(id)arg1 ;
-(id)customRotorItemsForIndex:(int)arg1 ;
-(id)gesturedTextInputAttributes;
-(void)updateGesturedTextInputAttributes;
-(void)handwritingActivateKeyboardReturnKey;
-(void)setVoiceOverFocused:(char)arg1 ;
-(int)lineStartPosition;
-(int)lineEndPosition;
-(NSRange)lineRangeForPosition:(unsigned)arg1 ;
-(char)shouldSpeakScrollStatusOnEntry;
-(char)includeDuringContentReading;
-(char)isReadingContent;
-(void)updatePageContent;
-(id)stringForLineNumber:(int)arg1 ;
-(CGRect)frameForLineNumber:(int)arg1 ;
-(int)lineNumberForPoint:(CGPoint)arg1 ;
-(void)setCurrentWordContextForBook:(id)arg1 ;
-(id)lineNumberAndColumnForPoint:(CGPoint)arg1 ;
-(NSRange)rangeForLineNumberAndColumn:(id)arg1 ;
-(id)valueForRange:(NSRange)arg1 ;
-(id)attributedValueForRange:(NSRange)arg1 ;
-(void)increaseWebSelection:(int)arg1 ;
-(void)decreaseWebSelection:(int)arg1 ;
-(void)deleteCharacterAtCursor;
-(void)replaceCharactersAtCursor:(unsigned)arg1 withString:(id)arg2 ;
-(CGRect)boundsForRange:(NSRange)arg1 ;
-(NSRange)textMarkerSelectionRange;
-(id)textMarkersForPoints:(id)arg1 ;
-(id)textNextMarker:(id)arg1 ;
-(id)textPreviousMarker:(id)arg1 ;
-(id)pageTextMarkerRange;
-(id)textLineEndMarker:(id)arg1 ;
-(NSRange)rangeForTextMarker:(id)arg1 ;
-(char)shouldAnnounceFontInfo;
-(char)isCameraIrisOpen;
-(char)isTourGuideRunning;
-(id)textMarkersForRange:(NSRange)arg1 ;
-(void)setSelectionToTextMarker:(id)arg1 ;
-(id)textLineStartMarker:(id)arg1 ;
-(CGRect)textMarkerFrame:(id)arg1 ;
-(id)elementForTextMarker:(id)arg1 ;
-(id)textMarkerArrayOfText:(id)arg1 ;
-(id)summaryElement;
-(id)headerElements;
-(void)addTitleElementToCache:(id)arg1 ;
-(char)elementActsAsTitleElement:(id)arg1 ;
-(void)updateTitleElements;
-(id)titleElements;
-(char)isInAppSwitcher;
-(char)isInFolder;
-(char)isSystemWideApp;
-(char)isSetupBuddy;
-(char)isSafari;
-(char)isMaps;
-(char)isIBooks;
-(id)typingCandidateElements;
-(id)elementAtRow:(int)arg1 andColumn:(int)arg2 ;
-(void)jumpToTableIndex:(id)arg1 ;
-(NSRange)rowRange;
-(NSRange)columnRange;
-(char)startStopToggle;
-(char)softwareKeyboardSupportsGestureKeyboard;
-(char)usingHardwareKeyboard;
-(char)isSystemBatteryLow;
-(id)launchableApps;
-(id)appSwitcherApps;
-(void)launchAppWithDisplayID:(id)arg1 ;
-(char)isQuietModeEnabled;
-(CGPoint)centerPointOfScreen;
-(char)isDictationListening;
-(id)currentHardwareKeyboardLayout;
-(id)currentSoftwareKeyboardLanguage;
-(id)currentSoftwareKeyboardLayout;
-(char)isSystemWideGestureInProgress;
-(int)currentCallState;
-(void)showBulletinBoard:(char)arg1 ;
-(void)restoreUserPreferencesChangedByHandwriting;
-(id)firstElementInStatusBar;
-(char)avoidAnnouncingDirectTouchArea;
-(id)lastElementInStatusBar;
-(char)isElementFirstElement:(char)arg1 orLastElement:(char)arg2 withTraits:(unsigned long long)arg3 ;
-(char)shouldStartReadAllOnFocus;
-(char)webSearchResultsActive;
-(id)staticTextString;
-(char)shouldSpeakMathEquationTrait;
-(void)setAccelemoterDisabled:(char)arg1 ;
-(void)setRotationCapabilityEnabled:(char)arg1 ;
-(void)setEventCaptureMode:(int)arg1 ;
-(char)dispatchKeyboardEvent:(id)arg1 ;
-(void)repostEvent:(id)arg1 ;
-(void)sendBrightnessEvent:(id)arg1 ;
-(void)sendTouchCancelledEvent;
-(void)notifyAnnouncementFinished:(id)arg1 ;
-(void)performSimpleTapAtPoint:(CGPoint)arg1 ;
-(void)postFingerTouchAtPoint:(CGPoint)arg1 withContextId:(unsigned)arg2 ;
-(void)postFingerDragAtPoint:(CGPoint)arg1 withContextId:(unsigned)arg2 ;
-(void)postFingerLiftAtPoint:(CGPoint)arg1 withContextId:(unsigned)arg2 ;
-(char)labelElementWithTitle:(id)arg1 ;
-(char)isInternationalKeyboardKey;
-(char)shouldSkipValidateElement;
-(void)setShouldSkipValidateElement:(char)arg1 ;
-(id)arrayOfTraitsAsStrings;
-(id)regionDescription;
-(void)applyHeaderElementsToRequest:(id)arg1 ;
-(id)mathSegmentsWithGranularityLevel:(unsigned)arg1 ;
-(id)mathSummary;
-(void)addTextualInformationToRequest:(id)arg1 options:(int)arg2 lastSeenLineAndColumn:(id)arg3 ;
-(char)canNavigateMathSegments;
-(id)arrayOfTraitsAsStringsWithTraitOrder:(id)arg1 ;
-(id)_processTextForPunctation:(id)arg1 replaceCommas:(char)arg2 ;
-(void)_applyAttributesFromText:(id)arg1 toRequest:(id)arg2 withLanguage:(id)arg3 ;
-(id)mathBrailleDescription;
-(NSRange)_brailleLineRangeForDescription:(id)arg1 position:(unsigned)arg2 ;
-(id)_copyMathTextualInformationWithBrailleLineRange:(NSRange*)arg1 brailleDescriptionRange:(NSRange*)arg2 position:(unsigned)arg3 rotorSelection:(id)arg4 shouldPreferRotorSelection:(char)arg5 ;
-(void)_applySelectedTrait:(id)arg1 ;
-(void)_applyLabelToRequest:(id)arg1 includeBlockQuote:(char)arg2 ;
-(id)mathEquationDescription;
-(void)_applyValueToRequest:(id)arg1 options:(int)arg2 lastSeenLineAndColumn:(id)arg3 ;
-(void)_applyTraitsToRequest:(id)arg1 options:(int)arg2 ;
-(void)_applyInvalidStatus:(id)arg1 ;
-(void)_applyRoleDescription:(id)arg1 ;
-(void)addTextualInformationToBrailleLine:(id)arg1 forPosition:(unsigned)arg2 rotorSelection:(id)arg3 shouldPreferRotorSelection:(char)arg4 lineRange:(NSRange*)arg5 descriptionRange:(NSRange*)arg6 ;
-(id)_mathExpression;
-(id)_mathAXStringFromAttributedString:(id)arg1 ;
-(unsigned)_minimumSegmentDepthForExpression:(id)arg1 withMaximumDepth:(unsigned)arg2 ;
-(unsigned)_minimumSegmentDepth;
-(id)_rawMathEquation;
-(int)mapFeatureType;
-(char)isAccessibilityOpaqueElementProvider;
-(float)maxValue;
-(void)scrollToPoint:(CGPoint)arg1 ;
-(CGPoint)convertPoint:(CGPoint)arg1 toContextId:(unsigned)arg2 ;
-(CGPoint)convertPoint:(CGPoint)arg1 fromContextId:(unsigned)arg2 ;
-(void)dealloc;
-(CGRect)frame;
-(char)isEqual:(id)arg1 ;
-(id)description;
-(id)url;
-(id)bundleIdentifier;
-(id)identifier;
-(id)activeKeyboard;
-(char)isValid;
-(CGPathRef)path;
-(id)copyWithZone:(NSZone*)arg1 ;
-(id)value;
-(id)label;
-(float)minValue;
-(void)setSelectedTextRange:(NSRange)arg1 ;
-(NSRange)selectedTextRange;
-(unsigned long long)traits;
-(void)updateFrame;
-(id)language;
-(void)updateValue;
-(id)initWithAXElement:(id)arg1 ;
-(char)isValidForApplication:(id)arg1 ;
-(id)initWithUIElement:(id)arg1 ;
-(id)uiElement;
-(id)elementForAttribute:(int)arg1 ;
-(unsigned)windowContextId;
-(CGRect)convertRect:(CGRect)arg1 fromContextId:(unsigned)arg2 ;
-(id)touchContainer;
-(CGPoint)visiblePoint;
-(CGPoint)centerPoint;
-(void)insertText:(id)arg1 atPosition:(int)arg2 ;
-(void)sendUserEventOccurred;
-(int)applicationOrientation;
-(id)firstElementInApplication;
-(id)firstElementInApplicationForFocus;
-(char)isSpringBoard;
-(char)isAccessibleElement;
-(id)hint;
-(CGRect)textCursorFrame;
-(BOOL)isTouchContainer;
-(id)textOperations;
-(void)insertTextAtCurrentPosition:(id)arg1 ;
-(id)opaqueElementInDirection:(int)arg1 startElement:(id)arg2 searchTraits:(unsigned long long)arg3 ;
-(id)opaqueParent;
-(BOOL)isSystemSleeping;
-(void)showControlCenter:(char)arg1 ;
-(BOOL)isSiriTalkingOrListening;
-(BOOL)isVoiceControlRunning;
-(void)setDeviceOrientation:(int)arg1 ;
-(BOOL)isApplication;
-(void)updateLabel;
-(int)pid;
-(id)instructions;
-(void)updateCache;
-(BOOL)isSystemLocked;
-(BOOL)isRequired;
-(id)pageContent;
-(id)textMarkerRange;
-(id)textMarkerRangeForSelection;
-(id)stringForTextMarkers:(id)arg1 ;
-(id)textMarkerForPoint:(CGPoint)arg1 ;
-(id)application;
-(id)originalLabel;
@end

@interface VOTCommandHelper : NSObject
+(id)commandHelper;
-(VOTElement *)practiceElement;
@end
